---
import siteConfig from "../siteConfig";
import { size as bigSquareSize } from "./BigSquare.astro";
import How02Row from "./How02_Row.astro";

import iconMicrosoft from "../assets/icons/icon-microsoft.png";
import iconAws from "../assets/icons/icon-aws.png";
import iconGcp from "../assets/icons/icon-gcp.png";

import iconGithub from "../assets/icons/icon-github.png";
import iconBitbucket from "../assets/icons/icon-bitbucket.png";
import iconGitlab from "../assets/icons/icon-gitlab.png";
import RectFlat from "./RectFlat.astro";

export const width = 404;
export const height = 328;
export const rootId = "hhh_how1";

const base = siteConfig.base;

const { padding = 0, version } = Astro.props;

const paddedWidth = width + padding * 2;
const paddedHeight = height + padding * 2;

const flatSquareWidth = 80;
const squareGap = (bigSquareSize - flatSquareWidth * 3) / 2;
---

<div class="hhh_heroRoot" id={rootId}>
  <div id="hhh_bigSquareArea" class="hhh_all3dObjects hhh_main3dTransform">
    <How02Row
      class="hhh_top"
      connectSide={"Bottom"}
      icons={[iconMicrosoft, iconAws, iconGcp]}
    />
    <How02Row
      class="hhh_bottom"
      icons={[iconGitlab, iconGithub, iconBitbucket]}
    />
  </div>
  {
    version !== "small" && (
      <div class="hhh_rectContainer">
        <RectFlat
          class="hhh_rect1"
          icon={`${base}/design-system-icons/cloud.svg`}
        />
        <RectFlat
          class="hhh_rect2"
          icon={`${base}/design-system-icons/git-pull.svg`}
        />
      </div>
    )
  }
</div>

<style
  lang="scss"
  define:vars={{
    bigSquareSize: `${bigSquareSize}px`,
    padding: `${padding}px`,
    heroHeight: `${height}px`,
    flatSquareWidth: `${flatSquareWidth}px`,
    paddedWidth: `${paddedWidth}px`,
    paddedHeight: `${paddedHeight}px`,
    squareGap: `${squareGap}px`,
  }}
>
  :global(*) {
    transform-origin: 50% 50%;
    user-select: none;
  }
  .hhh_heroRoot {
    --moderateShadow: drop-shadow(0px 3px 6px rgba(14, 16, 21, 0.2))
      drop-shadow(0px 10px 20px rgba(14, 16, 21, 0.3));
    :global(*) {
      transform-style: preserve-3d;
    }
    transform-origin: 0 0;
    width: var(--paddedWidth);
    height: var(--paddedHeight);
    position: relative;
    .hhh_container {
      position: relative;
    }
    .hhh_main3dTransform {
      position: absolute;
      left: calc(91px + var(--padding));
      top: calc(-33px + var(--padding));
      transform: rotateX(57deg) rotateY(0) rotateZ(-45deg);
      transform-origin: 50% 50%;
      width: var(--bigSquareSize);
      height: var(--bigSquareSize);
    }
    .hhh_bottomSquaresContainer {
      position: absolute;
      top: 0;
      left: 0;
      .bottomSquare {
        position: absolute;
        top: 0;
        left: 0;
      }
    }
    .hhh_bottom {
      top: calc(var(--flatSquareWidth) + (var(--squareGap) * 1.5));
    }

    .hhh_rectContainer {
      position: absolute;
      top: calc(var(--padding) + 145px + 66px);
      left: calc(var(--padding) + 244px + 0px);
    }
    .hhh_rect1,
    .hhh_rect2 {
      margin-bottom: 12px;
    }
  }
</style>

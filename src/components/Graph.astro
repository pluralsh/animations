---
interface Props {
  class?: string;
  color: 0 | 1 | 2;
  graphId: string;
  showStroke?: boolean;
  showFill?: boolean;
}
import { constructPath, data, generateLineNodes } from "../client/graph";

import GraphGradient from "./GraphGradient.astro";
import { v1 as uuid } from "uuid";

const {
  class: className,
  color: colorIdx = 0,
  graphId,
  showStroke = "true",
  showFill = "true",
} = Astro.props;
const { color, ceiling, floor } = data[colorIdx];

export const size = 288;
const gradientId = `gradientGraph_${uuid()}`;

const xPadding = 20;

const gridCount = 6;
const nodeCount = gridCount + 1;
const spacing = size / gridCount;

const nodes = generateLineNodes({
  nodeCount,
  floor,
  ceiling,
  spacing: spacing,
  xPadding: xPadding,
});
const pathString = constructPath(nodes);
---

<div
  class:list={["hhh_graph", className]}
  data-graph
  data-color={color}
  data-ceiling={ceiling}
  data-floor={floor}
  data-node-count={nodeCount}
  data-x-padding={xPadding}
  data-spacing={spacing}
  data-initial-nodes={JSON.stringify(nodes)}
  data-graph-id={graphId}
>
  <svg
    viewBox={`0 0 ${size + xPadding * 2} ${size}`}
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
  >
    <GraphGradient id={gradientId} color={color} />
    {
      (
        <path
          data-graph-path
          fill={showFill ? `url(#${gradientId})` : `transparent`}
          stroke={showStroke ? color : undefined}
          stroke-width="1"
        />
      )
    }
  </svg>
</div>

<script>
  import {
    constructPath,
    updateLineNodes,
    GraphNodeList,
    nodesToVals,
    valsToNodes,
    valsToGsapOptions,
  } from "../client/graph";
  import gsap from "gsap";
  const SPEED = 0.5; // steps per sec
  const STEP_DELAY = 1 / SPEED; // sec

  const graphs = document.querySelectorAll<HTMLElement>("[data-graph-id]");
  const uniqueIds = new Set<string>();
  graphs.forEach((graph) => {
    if (graph.dataset.graphId) {
      uniqueIds.add(graph.dataset.graphId);
    }
  });
  console.log("uniqueIds", uniqueIds);
  uniqueIds.forEach((graphId) => {
    const dataset = document.querySelector<HTMLElement>(
      `[data-graph-id=${graphId}]`
    ).dataset;

    const graphPaths = document.querySelectorAll<HTMLElement>(
      `[data-graph-id=${graphId}] [data-graph-path]`
    );
    console.log("graphPaths", graphPaths);

    const nodeCount = Number(dataset.nodeCount);
    const floor = Number(dataset.floor);
    const ceiling = Number(dataset.ceiling);
    const spacing = Number(dataset.spacing);
    const xPadding = Number(dataset.xPadding);
    const initialNodes = JSON.parse(dataset.initialNodes) as GraphNodeList;
    const opts = {
      nodeCount,
      floor,
      ceiling,
      spacing,
      xPadding,
    };
    const pathString = constructPath(initialNodes);
    graphPaths.forEach((graphPath) => {
      graphPath.setAttribute("d", pathString);
    });
    let nextNodes = updateLineNodes(initialNodes, opts);
    let nextPath = constructPath(nextNodes);

    let currentNodes = initialNodes;

    function tweenToNext(delay = 0) {
      let currentVals = nodesToVals(currentNodes);
      let toVals = nodesToVals(updateLineNodes(currentNodes, opts));
      const options = {
        ...valsToGsapOptions(toVals),
        duration: STEP_DELAY,
        delay: delay,
        ease: "sine.inOut",
        onUpdate: (x) => {
          currentNodes = valsToNodes(currentVals, opts);
          const nextPath = constructPath(currentNodes);
          graphPaths.forEach((graphPath) => {
            graphPath.setAttribute("d", nextPath);
          });
        },
        onComplete: () => {
          tweenToNext();
          if (listener) {
            window.removeEventListener("message", listener);
          }
        },
      };
      const tween = gsap.to(currentVals, options);
      const listener = (msg) => {
        if (msg?.data === "play") {
          tween.play();
          console.log("graph play");
        } else if (msg?.data === "pause") {
          console.log("graph pause");
          tween.pause();
        }
      };
      window?.addEventListener("message", listener);
    }
    const delay =
      graphId === "graph1"
        ? 0
        : graphId === "graph2"
        ? STEP_DELAY * 0.333
        : STEP_DELAY * 0.666;
    tweenToNext(delay);
  });
</script>
<style
  lang="scss"
  define:vars={{
    gridGap: `${spacing}px`,
    shadowColor: `${color}`,
    svgOffset: `${xPadding}px`,
  }}
>
  svg {
    position: absolute;
    top: 0;
    left: 0;
  }
  .hhh_graph {
    --offset: 0;
    position: absolute;
    top: 0;
    left: calc(1px - var(--svgOffset));
    width: calc(286px + (var(--svgOffset) * 2));
    overflow: visible;
    transform-origin: 0% 0%;
    transform: rotateX(90deg) translateY(-0.5px);
  }
  .hhh_graph1 {
    top: calc(var(--gridGap) * 1);
  }
  .hhh_graph2 {
    top: calc(var(--gridGap) * 3);
  }
  .hhh_graph3 {
    top: calc(var(--gridGap) * 5);
  }
</style>

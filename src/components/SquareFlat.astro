---
import StrokeGradient from "./StrokeGradient.astro";
import uuid from "uuid";

const {
  class: className,
  size = 80,
  width = 80,
  height = 80,
  mode = "provider",
  src,
  ...props
} = Astro.props;
const connectorProps = {
  "stroke-width": 1.5,
  stroke: "#5D63F4",
  "stroke-dasharray": "2.4",
};
const connectorLength = 110;
const svgProps = {
  viewBox: `0 0 ${connectorLength * 2} ${connectorLength * 2}`,
  width: connectorLength * 2,
  height: connectorLength * 2,
  overflow: "visible",
  xmlns: "http://www.w3.org/2000/svg",
};
const gradientId = `gradientSquareFlat_${uuid.v1()}`;
---

<div
  class:list={[
    className,
    "hhh_squareRoot",
    { hhh_connectTop: mode === "provider" },
  ]}
  {...props}
  data-mode={mode}
>
  <div class="hhh_connector hhh_top">
    <div class:list={["hhh_connectorInner"]}>
      <svg {...svgProps} class="hhh_connectorSVG">
        <path
          d={`M ${connectorLength},${connectorLength} l ${0},${-connectorLength}`}
          {...connectorProps}></path>
      </svg>
    </div>
  </div>
  <div class="hhh_connector hhh_right">
    <div class:list={["hhh_connectorInner"]}>
      <svg {...svgProps} class:list={["hhh_connectorSVG"]}>
        <path
          d={`M ${connectorLength},${connectorLength} l ${connectorLength},${0}`}
          {...connectorProps}></path>
      </svg>
    </div>
  </div>
  <div class="hhh_connector hhh_bottom">
    <div class:list={["hhh_connectorInner"]}>
      <svg {...svgProps} class:list={["hhh_connectorSVG"]}>
        <path
          d={`M ${connectorLength},${connectorLength} l ${0},${connectorLength}`}
          {...connectorProps}></path>
      </svg>
    </div>
  </div>
  <div class="hhh_connector hhh_left">
    <div class:list={["hhh_connectorInner"]}>
      <svg {...svgProps} class:list={["hhh_connectorSVG"]}>
        <path
          d={`M ${connectorLength},${connectorLength} l ${-connectorLength},${0}`}
          {...connectorProps}></path>
      </svg>
    </div>
  </div>
  <div class="hhh_shadow"><img src="/drop-shadow.png" /></div>
  <div class="hhh_squareShapeIn">
    <div class="hhh_squareShape">
      <svg
        class="hhh_squareShapeSVG"
        viewBox="0 0 80 80"
        xmlns="http://www.w3.org/2000/svg"
      >
        <StrokeGradient id={gradientId} />
        <path
          d="m2 79.5c-.82715 0-1.5-.67285-1.5-1.5v-76c0-.82715.67285-1.5 1.5-1.5h75.5c1.10254 0 2 .89697 2 2v75.5c0 .82715-.67285 1.5-1.5 1.5z"
          fill="#1c2029"></path>
        <path
          class="hhh_solidStroke"
          d="m77.5 1c.8271 0 1.5.6729 1.5 1.5v75.5c0 .5514-.4486 1-1 1h-76c-.5514 0-1-.4486-1-1v-76c0-.5514.4486-1 1-1zm0-1h-75.5c-1.10456 0-2 .89542-2 2v76c0 1.10456.89544 2 2 2h76c1.10456 0 2-.89544 2-2v-75.5c0-1.38071-1.11929-2.5-2.5-2.5z"
          fill="#2a2e37"></path>
        <path
          class="hhh_gradientStroke"
          d="m77.5 1c.8271 0 1.5.6729 1.5 1.5v75.5c0 .5514-.4486 1-1 1h-76c-.5514 0-1-.4486-1-1v-76c0-.5514.4486-1 1-1zm0-1h-75.5c-1.10456 0-2 .89542-2 2v76c0 1.10456.89544 2 2 2h76c1.10456 0 2-.89544 2-2v-75.5c0-1.38071-1.11929-2.5-2.5-2.5z"
          fill={`url(#${gradientId})`}></path>
      </svg>
      {src && <img class="hhh_iconImg" src={src} />}
    </div>
  </div>
</div>

<style
  lang="scss"
  define:vars={{
    squareWidth: `${width}px`,
    squareHeight: `${height}px`,
  }}
>
  @use "sass:color";

  @mixin connectorMasks($innerAmt, $outerAmt: 0%) {
    .hhh_connector.hhh_top .hhh_connectorSVG {
      clip-path: inset($outerAmt 0 ($innerAmt) 0);
    }
    .hhh_connector.hhh_right .hhh_connectorSVG {
      clip-path: inset(0 $outerAmt 0 ($innerAmt));
    }
    .hhh_connector.hhh_bottom .hhh_connectorSVG {
      clip-path: inset(($innerAmt) 0 $outerAmt 0);
    }
    .hhh_connector.hhh_left .hhh_connectorSVG {
      clip-path: inset(0 ($innerAmt) 0 $outerAmt);
    }
  }
  @mixin connectorHighlightStart {
    @include connectorMasks($innerAmt: 100%);
  }
  @mixin connectorHighlightEnd {
    @include connectorMasks($innerAmt: 70%);
  }

  @include connectorHighlightStart();

  svg {
    position: absolute;
    top: 0;
    left: 0;
  }
  .hhh_squareRoot,
  .hhh_squareShape,
  .hhh_squareShapeIn,
  .hhh_connectorInner,
  .hhh_connector {
    width: var(--squareWidth);
    height: var(--squareWidth);
  }
  .hhh_squareRoot {
    position: relative;
    > * {
      pointer-events: none;
    }
  }
  .hhh_gradientStroke,
  .hhh_solidStroke {
    transition: opacity 0.2s linear;
  }
  .hhh_gradientStroke {
    opacity: 0;
  }
  .hhh_squareShape {
    position: relative;
    transform-origin: 50% 50%;
    z-index: 1;
    --zTransform: translateZ(0);
  }
  .hhh_shadow {
    --zTransform: translateZ(-15px);
    pointer-events: none;
    position: absolute;
    top: -50%;
    right: -50%;
    bottom: -50%;
    left: -50%;
    transform: var(--zTransform);
    img {
      display: block;
      width: 100%;
    }
  }
  .hhh_iconImg {
    position: absolute;
    top: 0;
    left: 0;
    display: block;
    width: 100%;
  }

  .hhh_connector {
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
    display: none;
  }
  .hhh_connectorInner {
    transform: translateX(31px) translateY(-31px) translateZ(-30px);
  }
  .hhh_connectorSVG {
    transition: all 0.3s ease-in-out;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate3d(-50%, -50%, 0);
  }

  .hhh_connectTop {
    .hhh_connector.hhh_top {
      display: block;
    }
  }
  .hhh_connectRight {
    .hhh_connector.hhh_right {
      display: block;
    }
  }
  .hhh_connectBottom {
    .hhh_connector.hhh_bottom {
      display: block;
    }
  }
  .hhh_connectLeft {
    .hhh_connector.hhh_left {
      display: block;
    }
  }

  /* 
     Provider mode 
  */
  .hhh_squareRoot[data-mode="provider"] {
    /* Base */
    .hhh_icon {
    }
    .hhh_iconImg {
      filter: grayscale(100%);
      opacity: 0.5;
      transition: all 0.2s linear;
    }

    .hhh_squareShape,
    .hhh_shadow {
      transition: transform 0.4s cubic-bezier(0.5, 1.79, 0.68, 1);
      transition-delay: 0;
    }

    /* Highlights */
    &.hhh_highlight,
    &:hover {
      @include connectorHighlightEnd();

      .hhh_squareShape,
      .hhh_shadow {
        transform: var(--zTransform) translateY(-15px);
      }

      .hhh_iconImg {
        filter: grayscale(0%);
        opacity: 1;
      }
      .hhh_gradientStroke {
        opacity: 1;
      }
      .hhh_solidStroke {
        opacity: 0;
      }
    }
    &:hover {
      .hhh_squareShape {
        box-shadow: 0 0 15px 0 color.change(#494ff2, $alpha: 0.5);
      }
    }
  }

  /* 
     Cluster mode 
  */
  .hhh_squareRoot[data-mode="cluster"] {
    @include connectorMasks($innerAmt: 100%, $outerAmt: 00%);

    /* Base */
    .hhh_squareShape {
      opacity: 0.2;
    }
    .hhh_squareShape,
    .hhh_shadow {
      transition: 0.2s ease-in-out;
    }

    .hhh_iconImg {
      opacity: 0;
      transition: opacity 0.1s linear;
    }
    .hhh_shadow img {
      opacity: 0;
      transition: 0.2s linear;
    }
    .hhh_connectorInner {
      transform: translateX(45px) translateY(-45px) translateZ(-30px);
    }

    .hhh_squareShape {
      outline: 1px solid color.change(#494ff2, $alpha: 0);
      transition: all 0.5s ease-in-out;
    }
    &[data-valid-move]:not([data-active]) {
      .hhh_squareShape {
        opacity: 0.4;
        .hhh_gradientStroke {
          opacity: 1;
        }
        .hhh_solidStroke {
          opacity: 0;
        }
      }
    }
    /* Highlights */
    &[data-active] {
      @include connectorMasks($innerAmt: 55%, $outerAmt: 00%);
      .hhh_squareShape {
        opacity: 1;
        transition: 0.3s ease-in-out;
      }
      .hhh_gradientStroke {
        opacity: 1;
      }
      .hhh_solidStroke {
        opacity: 0;
      }
      .hhh_iconImg {
        opacity: 1;
        transition-delay: 0.2s;
      }
      .hhh_shadow img {
        opacity: 1;
        transition-delay: 0.1s;
      }
      &.hhh_connectTop .hhh_squareShape {
        transform: rotateX(180deg);
      }
      &.hhh_connectRight .hhh_squareShape {
        transform: rotateY(180deg);
      }
      &.hhh_connectBottom .hhh_squareShape {
        transform: rotateX(-180deg);
      }
      &.hhh_connectLeft .hhh_squareShape {
        transform: rotateY(-180deg);
      }
    }
  }
</style>

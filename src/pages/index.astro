---
import PluralLogomark from "../components/PluralLogomark.astro";
import SquareDeep from "../components/SquareDeep.astro";
import BigSquare from "../components/BigSquare.astro";
import SquareFlat from "../components/SquareFlat.astro";
import Layout from "../layouts/Layout.astro";
const svgWidth = 1080;
const svgHeight = 1080;
const squareWidth = 58;
const squareHeight = 58;
const flatSquareWidth = 80;
const flatSquareHeight = 80;
const gapX = 20;
const gapY = 20;
const xSpacing = squareWidth + gapX;
const ySpacing = squareHeight + gapY;
const bigSquareSize = 288;
const centerSquaresWidth = 3 * squareWidth + 2 * gapX;
const centerSquaresHeight = 3 * squareHeight + 2 * gapY;
const centerSquaresTop = (bigSquareSize - centerSquaresHeight) / 2;
const centerSquaresLeft = (bigSquareSize - centerSquaresWidth) / 2;
const flatSquareOffset = (bigSquareSize - flatSquareWidth) / 2;
const flatSquareGap = flatSquareOffset - flatSquareWidth;

const centerIconProps = [
  [{}, {}, {}],
  [{ src: "icons/icon-gcp.png", gradientStroke: true }, { hide: true }, {}],
  [
    {},
    { src: "icons/icon-superset.png", gradientStroke: true },
    { src: "icons/icon-dagster.png", gradientStroke: true },
  ],
];
---

<Layout title="My animation">
  <link rel="stylesheet" href="/index.css" />

  <script src="../client/anim.ts"></script>
  <main>
    <div class="myAnimation" id="animation1">
      <div
        class="bigSquareArea"
        style={{ width: `${bigSquareSize}px`, height: `${bigSquareSize}px` }}
      >
        <div class="bottomSquaresContainer">
          <SquareFlat
            class="bottomSquare square1"
            src="/icons/icon-azure.png"
            style={{ left: `${flatSquareOffset * 0}px` }}
          />
          <SquareFlat
            class="bottomSquare square2"
            src="/icons/icon-aws.png"
            style={{ left: `${flatSquareOffset * 1}px` }}
          />
          <SquareFlat
            class="bottomSquare square3"
            src="/icons/icon-gcp.png"
            style={{ left: `${flatSquareOffset * 2}px` }}
          />
        </div>
        <div class="bigSquareContainer">
          <BigSquare class="bigSquare" style={{ zIndex: -1 }} />
          <div
            class="squares"
            style={{
              top: `${centerSquaresTop}px`,
              left: `${centerSquaresLeft}px`,
            }}
          >
            <div
              class:list={["middleSquare", "pluralLogo"]}
              style={{
                top: `${1 * ySpacing}px`,
                left: `${1 * xSpacing}px`,
              }}
            >
              <PluralLogomark />
            </div>
          </div>
        </div>
        <div
          class="squares"
          style={{
            top: `${centerSquaresTop}px`,
            left: `${centerSquaresLeft}px`,
          }}
        >
          {
            centerIconProps.map((row, j) => {
              const x = row.map(({ src, gradientStroke, hide }, i) => {
                return (
                  <div
                    class:list={["middleSquare", "appSquare"]}
                    style={{
                      top: `${j * ySpacing}px`,
                      left: `${i * xSpacing}px`,
                      ...(hide ? { display: "none" } : {}),
                    }}
                  >
                    <div class="hoverShape">
                      <div class:list={["shape"]}>
                        {hide ? null : (
                          <>
                            <SquareDeep
                              gradientStroke={gradientStroke}
                              src={src}
                            />
                          </>
                        )}
                      </div>
                    </div>

                    <div class="shadow">
                      <img src="/drop-shadow.png" />
                    </div>
                  </div>
                );
              });
              return <>{x}</>;
            })
          }
        </div>
      </div>
    </div>
  </main>
</Layout>
<script>
  const gradients = document.querySelectorAll(".rotateGradient");
</script>
<style
  lang="scss"
  define:vars={{
    squareWidth: `${squareWidth}px`,
    squareHeight: `${squareHeight}px`,
    centerSquaresWidth: `${centerSquaresWidth}px`,
    centerSquaresHeight: `${centerSquaresHeight}px`,
    bigSquareSize: `${bigSquareSize}px`,
    flatSquareOffset: `${flatSquareOffset}px`,
    flatSquareGap: `${flatSquareGap}px`,
  }}
>
  .myAnimation {
    --moderateShadow: drop-shadow(0px 3px 6px rgba(14, 16, 21, 0.2))
      drop-shadow(0px 10px 20px rgba(14, 16, 21, 0.3));
    * {
      transform-style: preserve-3d;
      transform-origin: 50% 50%;
    }
    transform-origin: 50% 50%;
    background-color: rgba(255, 0, 0, 0);
    width: 500px;
    height: 500px;
    position: relative;
    .bottomSquaresContainer {
      position: absolute;
      top: calc(var(--bigSquareSize) + (var(--flatSquareGap) * 2));
      left: 0;
      .bottomSquare {
        position: absolute;
        top: 0;
        left: 0;
      }
    }
    .bigSquareArea {
      position: absolute;
      left: 58px;
      top: -28px;
      transform: rotateX(57deg) rotateY(0) rotateZ(-45deg);
      transform-origin: 50% 50%;
    }
    .bigSquare {
      position: absolute;
      pointer-events: none;
      z-index: -1;
    }
    .squares {
      position: absolute;
    }
    .middleSquare {
      position: absolute;
      width: var(--squareWidth);
      height: var(--squareWidth);
      .shape {
        position: absolute;
        width: 100%;
        height: 100%;
        pointer-events: none;
        cursor: default;
        border-radius: 3px;
      }
      &.appSquare {
        :global(.side1),
        :global(.side2) {
          transition: 1s fill;
        }
        &:hover {
          .hoverShape {
            transform: translateZ(10px);
            transition: transform 0.2s ease-out;
            transform-origin: 50% 100%;
          }
          :global(.side1) {
            fill: #9fa3f9;
          }
          :global(.side2) {
            fill: #cfd1fc;
          }
          :global(.side1),
          :global(.side2) {
            transition: 0.05s fill;
          }
        }
      }
      .shadow {
        pointer-events: none;
        position: absolute;
        top: -36px;
        bottom: -36px;
        left: -36px;
        right: -36px;
        z-index: -1;
        img {
          width: 100%;
        }
      }
    }

    .square {
      position: absolute;
      width: 30px;
      height: 30px;
      .shape {
        position: absolute;
        width: 100%;
        height: 100%;
        pointer-events: none;
        cursor: default;
        border-radius: 3px;
      }
      &:hover {
        .hoverShape {
          transform: rotateX(0) rotateY(-10deg) rotateZ(0) translateZ(5px);
          transition: transform 0.1s ease-out;
          transform-origin: 50% 100%;
        }
      }
    }
  }
</style>
